# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/GimbalAngle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GimbalAngle(genpy.Message):
  _md5sum = "c40a9f4cc40913a5e1652320d0566fd8"
  _type = "roborts_msgs/GimbalAngle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#gimbal feedback angle data
uint8 robort_behaviour
bool enable_track
bool enable_attack
float64 yaw_target_angle
float64 pitch_target_angle
float64 enemy_distance
uint8 shoot_level
uint16 bullet_can_num
float64 fixed_offset_angle
"""
  __slots__ = ['robort_behaviour','enable_track','enable_attack','yaw_target_angle','pitch_target_angle','enemy_distance','shoot_level','bullet_can_num','fixed_offset_angle']
  _slot_types = ['uint8','bool','bool','float64','float64','float64','uint8','uint16','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robort_behaviour,enable_track,enable_attack,yaw_target_angle,pitch_target_angle,enemy_distance,shoot_level,bullet_can_num,fixed_offset_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GimbalAngle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robort_behaviour is None:
        self.robort_behaviour = 0
      if self.enable_track is None:
        self.enable_track = False
      if self.enable_attack is None:
        self.enable_attack = False
      if self.yaw_target_angle is None:
        self.yaw_target_angle = 0.
      if self.pitch_target_angle is None:
        self.pitch_target_angle = 0.
      if self.enemy_distance is None:
        self.enemy_distance = 0.
      if self.shoot_level is None:
        self.shoot_level = 0
      if self.bullet_can_num is None:
        self.bullet_can_num = 0
      if self.fixed_offset_angle is None:
        self.fixed_offset_angle = 0.
    else:
      self.robort_behaviour = 0
      self.enable_track = False
      self.enable_attack = False
      self.yaw_target_angle = 0.
      self.pitch_target_angle = 0.
      self.enemy_distance = 0.
      self.shoot_level = 0
      self.bullet_can_num = 0
      self.fixed_offset_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B3dBHd().pack(_x.robort_behaviour, _x.enable_track, _x.enable_attack, _x.yaw_target_angle, _x.pitch_target_angle, _x.enemy_distance, _x.shoot_level, _x.bullet_can_num, _x.fixed_offset_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.robort_behaviour, _x.enable_track, _x.enable_attack, _x.yaw_target_angle, _x.pitch_target_angle, _x.enemy_distance, _x.shoot_level, _x.bullet_can_num, _x.fixed_offset_angle,) = _get_struct_3B3dBHd().unpack(str[start:end])
      self.enable_track = bool(self.enable_track)
      self.enable_attack = bool(self.enable_attack)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B3dBHd().pack(_x.robort_behaviour, _x.enable_track, _x.enable_attack, _x.yaw_target_angle, _x.pitch_target_angle, _x.enemy_distance, _x.shoot_level, _x.bullet_can_num, _x.fixed_offset_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.robort_behaviour, _x.enable_track, _x.enable_attack, _x.yaw_target_angle, _x.pitch_target_angle, _x.enemy_distance, _x.shoot_level, _x.bullet_can_num, _x.fixed_offset_angle,) = _get_struct_3B3dBHd().unpack(str[start:end])
      self.enable_track = bool(self.enable_track)
      self.enable_attack = bool(self.enable_attack)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B3dBHd = None
def _get_struct_3B3dBHd():
    global _struct_3B3dBHd
    if _struct_3B3dBHd is None:
        _struct_3B3dBHd = struct.Struct("<3B3dBHd")
    return _struct_3B3dBHd
