# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roborts_msgs/ArmorsPos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ArmorsPos(genpy.Message):
  _md5sum = "6aae424957a17912d9b09267ee744062"
  _type = "roborts_msgs/ArmorsPos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 num_armor
float32[8] armor_0
float32[8] armor_1
uint8[8] id
uint8[8] state
float32[8] robot_A
float32[8] robot_B
float32[8] pose_A
float32[8] pose_B
"""
  __slots__ = ['num_armor','armor_0','armor_1','id','state','robot_A','robot_B','pose_A','pose_B']
  _slot_types = ['uint8','float32[8]','float32[8]','uint8[8]','uint8[8]','float32[8]','float32[8]','float32[8]','float32[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_armor,armor_0,armor_1,id,state,robot_A,robot_B,pose_A,pose_B

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmorsPos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.num_armor is None:
        self.num_armor = 0
      if self.armor_0 is None:
        self.armor_0 = [0.] * 8
      if self.armor_1 is None:
        self.armor_1 = [0.] * 8
      if self.id is None:
        self.id = b'\0'*8
      if self.state is None:
        self.state = b'\0'*8
      if self.robot_A is None:
        self.robot_A = [0.] * 8
      if self.robot_B is None:
        self.robot_B = [0.] * 8
      if self.pose_A is None:
        self.pose_A = [0.] * 8
      if self.pose_B is None:
        self.pose_B = [0.] * 8
    else:
      self.num_armor = 0
      self.armor_0 = [0.] * 8
      self.armor_1 = [0.] * 8
      self.id = b'\0'*8
      self.state = b'\0'*8
      self.robot_A = [0.] * 8
      self.robot_B = [0.] * 8
      self.pose_A = [0.] * 8
      self.pose_B = [0.] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.num_armor
      buff.write(_get_struct_B().pack(_x))
      buff.write(_get_struct_8f().pack(*self.armor_0))
      buff.write(_get_struct_8f().pack(*self.armor_1))
      _x = self.id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      _x = self.state
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      buff.write(_get_struct_8f().pack(*self.robot_A))
      buff.write(_get_struct_8f().pack(*self.robot_B))
      buff.write(_get_struct_8f().pack(*self.pose_A))
      buff.write(_get_struct_8f().pack(*self.pose_B))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.num_armor,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 32
      self.armor_0 = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.armor_1 = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 8
      self.id = str[start:end]
      start = end
      end += 8
      self.state = str[start:end]
      start = end
      end += 32
      self.robot_A = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.robot_B = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.pose_A = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 32
      self.pose_B = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.num_armor
      buff.write(_get_struct_B().pack(_x))
      buff.write(self.armor_0.tostring())
      buff.write(self.armor_1.tostring())
      _x = self.id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      _x = self.state
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
      buff.write(self.robot_A.tostring())
      buff.write(self.robot_B.tostring())
      buff.write(self.pose_A.tostring())
      buff.write(self.pose_B.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.num_armor,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 32
      self.armor_0 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.armor_1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 8
      self.id = str[start:end]
      start = end
      end += 8
      self.state = str[start:end]
      start = end
      end += 32
      self.robot_A = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.robot_B = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.pose_A = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      start = end
      end += 32
      self.pose_B = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_8s = None
def _get_struct_8s():
    global _struct_8s
    if _struct_8s is None:
        _struct_8s = struct.Struct("<8s")
    return _struct_8s
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
