// Generated by gencpp from file roborts_msgs/KalmanPlot.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_KALMANPLOT_H
#define ROBORTS_MSGS_MESSAGE_KALMANPLOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct KalmanPlot_
{
  typedef KalmanPlot_<ContainerAllocator> Type;

  KalmanPlot_()
    : raw_x(0.0)
    , raw_y(0.0)
    , raw_vx(0.0)
    , raw_vy(0.0)
    , raw_yaw(0.0)
    , kalman_x(0.0)
    , kalman_y(0.0)
    , kalman_vx(0.0)
    , kalman_vy(0.0)
    , kalman_yaw(0.0)  {
    }
  KalmanPlot_(const ContainerAllocator& _alloc)
    : raw_x(0.0)
    , raw_y(0.0)
    , raw_vx(0.0)
    , raw_vy(0.0)
    , raw_yaw(0.0)
    , kalman_x(0.0)
    , kalman_y(0.0)
    , kalman_vx(0.0)
    , kalman_vy(0.0)
    , kalman_yaw(0.0)  {
  (void)_alloc;
    }



   typedef float _raw_x_type;
  _raw_x_type raw_x;

   typedef float _raw_y_type;
  _raw_y_type raw_y;

   typedef float _raw_vx_type;
  _raw_vx_type raw_vx;

   typedef float _raw_vy_type;
  _raw_vy_type raw_vy;

   typedef float _raw_yaw_type;
  _raw_yaw_type raw_yaw;

   typedef float _kalman_x_type;
  _kalman_x_type kalman_x;

   typedef float _kalman_y_type;
  _kalman_y_type kalman_y;

   typedef float _kalman_vx_type;
  _kalman_vx_type kalman_vx;

   typedef float _kalman_vy_type;
  _kalman_vy_type kalman_vy;

   typedef float _kalman_yaw_type;
  _kalman_yaw_type kalman_yaw;





  typedef boost::shared_ptr< ::roborts_msgs::KalmanPlot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::KalmanPlot_<ContainerAllocator> const> ConstPtr;

}; // struct KalmanPlot_

typedef ::roborts_msgs::KalmanPlot_<std::allocator<void> > KalmanPlot;

typedef boost::shared_ptr< ::roborts_msgs::KalmanPlot > KalmanPlotPtr;
typedef boost::shared_ptr< ::roborts_msgs::KalmanPlot const> KalmanPlotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::KalmanPlot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::KalmanPlot_<ContainerAllocator1> & lhs, const ::roborts_msgs::KalmanPlot_<ContainerAllocator2> & rhs)
{
  return lhs.raw_x == rhs.raw_x &&
    lhs.raw_y == rhs.raw_y &&
    lhs.raw_vx == rhs.raw_vx &&
    lhs.raw_vy == rhs.raw_vy &&
    lhs.raw_yaw == rhs.raw_yaw &&
    lhs.kalman_x == rhs.kalman_x &&
    lhs.kalman_y == rhs.kalman_y &&
    lhs.kalman_vx == rhs.kalman_vx &&
    lhs.kalman_vy == rhs.kalman_vy &&
    lhs.kalman_yaw == rhs.kalman_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::KalmanPlot_<ContainerAllocator1> & lhs, const ::roborts_msgs::KalmanPlot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::KalmanPlot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::KalmanPlot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::KalmanPlot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f889565f28f759375574e025551dafe";
  }

  static const char* value(const ::roborts_msgs::KalmanPlot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f889565f28f7593ULL;
  static const uint64_t static_value2 = 0x75574e025551dafeULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/KalmanPlot";
  }

  static const char* value(const ::roborts_msgs::KalmanPlot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 raw_x\n"
"float32 raw_y\n"
"float32 raw_vx\n"
"float32 raw_vy\n"
"float32 raw_yaw\n"
"\n"
"float32 kalman_x\n"
"float32 kalman_y\n"
"float32 kalman_vx\n"
"float32 kalman_vy\n"
"float32 kalman_yaw\n"
;
  }

  static const char* value(const ::roborts_msgs::KalmanPlot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.raw_x);
      stream.next(m.raw_y);
      stream.next(m.raw_vx);
      stream.next(m.raw_vy);
      stream.next(m.raw_yaw);
      stream.next(m.kalman_x);
      stream.next(m.kalman_y);
      stream.next(m.kalman_vx);
      stream.next(m.kalman_vy);
      stream.next(m.kalman_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KalmanPlot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::KalmanPlot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::KalmanPlot_<ContainerAllocator>& v)
  {
    s << indent << "raw_x: ";
    Printer<float>::stream(s, indent + "  ", v.raw_x);
    s << indent << "raw_y: ";
    Printer<float>::stream(s, indent + "  ", v.raw_y);
    s << indent << "raw_vx: ";
    Printer<float>::stream(s, indent + "  ", v.raw_vx);
    s << indent << "raw_vy: ";
    Printer<float>::stream(s, indent + "  ", v.raw_vy);
    s << indent << "raw_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.raw_yaw);
    s << indent << "kalman_x: ";
    Printer<float>::stream(s, indent + "  ", v.kalman_x);
    s << indent << "kalman_y: ";
    Printer<float>::stream(s, indent + "  ", v.kalman_y);
    s << indent << "kalman_vx: ";
    Printer<float>::stream(s, indent + "  ", v.kalman_vx);
    s << indent << "kalman_vy: ";
    Printer<float>::stream(s, indent + "  ", v.kalman_vy);
    s << indent << "kalman_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.kalman_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_KALMANPLOT_H
