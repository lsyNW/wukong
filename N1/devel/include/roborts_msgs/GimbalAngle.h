// Generated by gencpp from file roborts_msgs/GimbalAngle.msg
// DO NOT EDIT!


#ifndef ROBORTS_MSGS_MESSAGE_GIMBALANGLE_H
#define ROBORTS_MSGS_MESSAGE_GIMBALANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roborts_msgs
{
template <class ContainerAllocator>
struct GimbalAngle_
{
  typedef GimbalAngle_<ContainerAllocator> Type;

  GimbalAngle_()
    : robort_behaviour(0)
    , enable_track(false)
    , enable_attack(false)
    , yaw_target_angle(0.0)
    , pitch_target_angle(0.0)
    , enemy_distance(0.0)
    , shoot_level(0)
    , bullet_can_num(0)
    , fixed_offset_angle(0.0)  {
    }
  GimbalAngle_(const ContainerAllocator& _alloc)
    : robort_behaviour(0)
    , enable_track(false)
    , enable_attack(false)
    , yaw_target_angle(0.0)
    , pitch_target_angle(0.0)
    , enemy_distance(0.0)
    , shoot_level(0)
    , bullet_can_num(0)
    , fixed_offset_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _robort_behaviour_type;
  _robort_behaviour_type robort_behaviour;

   typedef uint8_t _enable_track_type;
  _enable_track_type enable_track;

   typedef uint8_t _enable_attack_type;
  _enable_attack_type enable_attack;

   typedef double _yaw_target_angle_type;
  _yaw_target_angle_type yaw_target_angle;

   typedef double _pitch_target_angle_type;
  _pitch_target_angle_type pitch_target_angle;

   typedef double _enemy_distance_type;
  _enemy_distance_type enemy_distance;

   typedef uint8_t _shoot_level_type;
  _shoot_level_type shoot_level;

   typedef uint16_t _bullet_can_num_type;
  _bullet_can_num_type bullet_can_num;

   typedef double _fixed_offset_angle_type;
  _fixed_offset_angle_type fixed_offset_angle;





  typedef boost::shared_ptr< ::roborts_msgs::GimbalAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roborts_msgs::GimbalAngle_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalAngle_

typedef ::roborts_msgs::GimbalAngle_<std::allocator<void> > GimbalAngle;

typedef boost::shared_ptr< ::roborts_msgs::GimbalAngle > GimbalAnglePtr;
typedef boost::shared_ptr< ::roborts_msgs::GimbalAngle const> GimbalAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roborts_msgs::GimbalAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roborts_msgs::GimbalAngle_<ContainerAllocator1> & lhs, const ::roborts_msgs::GimbalAngle_<ContainerAllocator2> & rhs)
{
  return lhs.robort_behaviour == rhs.robort_behaviour &&
    lhs.enable_track == rhs.enable_track &&
    lhs.enable_attack == rhs.enable_attack &&
    lhs.yaw_target_angle == rhs.yaw_target_angle &&
    lhs.pitch_target_angle == rhs.pitch_target_angle &&
    lhs.enemy_distance == rhs.enemy_distance &&
    lhs.shoot_level == rhs.shoot_level &&
    lhs.bullet_can_num == rhs.bullet_can_num &&
    lhs.fixed_offset_angle == rhs.fixed_offset_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roborts_msgs::GimbalAngle_<ContainerAllocator1> & lhs, const ::roborts_msgs::GimbalAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roborts_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roborts_msgs::GimbalAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roborts_msgs::GimbalAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roborts_msgs::GimbalAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c40a9f4cc40913a5e1652320d0566fd8";
  }

  static const char* value(const ::roborts_msgs::GimbalAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc40a9f4cc40913a5ULL;
  static const uint64_t static_value2 = 0xe1652320d0566fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roborts_msgs/GimbalAngle";
  }

  static const char* value(const ::roborts_msgs::GimbalAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#gimbal feedback angle data\n"
"uint8 robort_behaviour\n"
"bool enable_track\n"
"bool enable_attack\n"
"float64 yaw_target_angle\n"
"float64 pitch_target_angle\n"
"float64 enemy_distance\n"
"uint8 shoot_level\n"
"uint16 bullet_can_num\n"
"float64 fixed_offset_angle\n"
;
  }

  static const char* value(const ::roborts_msgs::GimbalAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robort_behaviour);
      stream.next(m.enable_track);
      stream.next(m.enable_attack);
      stream.next(m.yaw_target_angle);
      stream.next(m.pitch_target_angle);
      stream.next(m.enemy_distance);
      stream.next(m.shoot_level);
      stream.next(m.bullet_can_num);
      stream.next(m.fixed_offset_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roborts_msgs::GimbalAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roborts_msgs::GimbalAngle_<ContainerAllocator>& v)
  {
    s << indent << "robort_behaviour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robort_behaviour);
    s << indent << "enable_track: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_track);
    s << indent << "enable_attack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_attack);
    s << indent << "yaw_target_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_target_angle);
    s << indent << "pitch_target_angle: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_target_angle);
    s << indent << "enemy_distance: ";
    Printer<double>::stream(s, indent + "  ", v.enemy_distance);
    s << indent << "shoot_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shoot_level);
    s << indent << "bullet_can_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bullet_can_num);
    s << indent << "fixed_offset_angle: ";
    Printer<double>::stream(s, indent + "  ", v.fixed_offset_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBORTS_MSGS_MESSAGE_GIMBALANGLE_H
